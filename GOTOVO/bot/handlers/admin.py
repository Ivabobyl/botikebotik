import logging
from typing import Dict, List, Any, Optional, Union, Tuple, cast

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from telegram.constants import ParseMode

from bot.config.config import (
    load_config, save_config, update_rates, get_current_rates, 
    get_referral_percentage, add_admin, remove_admin, is_admin,
    add_operator, remove_operator, is_operator, get_min_amount, set_min_amount
)
from bot.database import (
    get_user, save_user, get_users, get_users_by_role, 
    get_active_orders, get_in_progress_orders, get_completed_orders,
    add_custom_command, remove_custom_command, get_custom_command
)
from bot.utils.keyboards import admin_keyboard, back_button
from bot.utils.helpers import is_valid_user_id, check_admin

logger = logging.getLogger(__name__)

# Admin commands
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show admin panel with options"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if this is a callback query or direct command
    if update.callback_query:
        await update.callback_query.answer()
        method = update.callback_query.edit_message_text
    else:
        method = update.message.reply_text
    
    keyboard = admin_keyboard()
    
    await method(
        "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user management panel"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Create keyboard with users by role
    keyboard = []
    
    # Add buttons for each role
    keyboard.append([
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_list_users_user"),
        InlineKeyboardButton("üõ†Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_list_users_operator")
    ])
    keyboard.append([
        InlineKeyboardButton("üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_list_users_admin")
    ])
    keyboard.append([
        InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_assign_role")
    ])
    keyboard.append([back_button("admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_list_users_by_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List users by role"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get role from callback data
    query_data = update.callback_query.data
    role = query_data.split('_')[-1]  # Extract role from callback_data
    
    # Get users by role
    users = await get_users_by_role(role)
    
    # Create keyboard for pagination or back button
    keyboard = []
    
    # Add back button
    keyboard.append([back_button("admin_manage_users")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Create message text
    role_names = {
        "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "operator": "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã",
        "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
    }
    
    text = f"üë• *{role_names.get(role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')}*\n\n"
    
    if not users:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    else:
        for i, user in enumerate(users, 1):
            username = user.get("username", "–ù–µ—Ç –∏–º–µ–Ω–∏")
            text += f"{i}. {username} (ID: `{user.get('user_id')}`)\n"
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_assign_role_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start the process of assigning a role to a user"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Create back button
    keyboard = [[back_button("admin_manage_users")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üë§ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `123456789`",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Set conversation state
    context.user_data["admin_action"] = "waiting_for_user_id"

async def admin_handle_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle user ID input for role assignment"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for user ID
    if context.user_data.get("admin_action") != "waiting_for_user_id":
        return
    
    # Get the user ID from the message
    input_text = update.message.text.strip()
    
    # Validate user ID
    if not is_valid_user_id(input_text):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID."
        )
        return
    
    target_user_id = int(input_text)
    
    # Check if user exists in database
    user = await get_user(target_user_id)
    
    if not user:
        await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."
        )
        return
    
    # Save target user ID in context
    context.user_data["target_user_id"] = target_user_id
    context.user_data["admin_action"] = "waiting_for_role"
    
    # Create keyboard with role options
    keyboard = [
        [
            InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="admin_set_role_user"),
            InlineKeyboardButton("üõ†Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data="admin_set_role_operator")
        ],
        [
            InlineKeyboardButton("üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin_set_role_admin")
        ],
        [InlineKeyboardButton("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_set_role_blocked")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    username = user.get("username", "–ù–µ—Ç –∏–º–µ–Ω–∏")
    current_role = user.get("role", "user")
    
    await update.message.reply_text(
        f"üë§ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"ID: `{target_user_id}`\n"
        f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_set_user_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set role for a user"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Get the target user ID from context
    target_user_id = context.user_data.get("target_user_id")
    
    if not target_user_id:
        await update.callback_query.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Get role from callback data
    query_data = update.callback_query.data
    role = query_data.split('_')[-1]  # Extract role from callback_data
    
    # Get user data
    user = await get_user(target_user_id)
    
    if not user:
        await update.callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Update user role
    user["role"] = role
    await save_user(target_user_id, user)
    
    # Update admin list if necessary
    if role == "admin":
        add_admin(target_user_id)
    elif user.get("role") == "admin" and role != "admin":
        remove_admin(target_user_id)
    
    await update.callback_query.answer(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {role}")
    
    # Clear conversation state
    if "admin_action" in context.user_data:
        del context.user_data["admin_action"]
    if "target_user_id" in context.user_data:
        del context.user_data["target_user_id"]
    
    # Show confirmation and return to admin panel
    role_names = {
        "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "operator": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
        "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "blocked": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    }
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"‚úÖ *–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username', '–ù–µ—Ç –∏–º–µ–Ω–∏')}\n"
        f"ID: `{target_user_id}`\n"
        f"–ù–æ–≤–∞—è —Ä–æ–ª—å: {role_names.get(role, role)}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_manage_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show current rates and options to change them"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get current rates
    rates = get_current_rates()
    
    # –†–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–¨ –ö –î–û–õ–õ–ê–†–£" –∏ "–î–û–õ–õ–ê–† –ö LTC"
    ltc_to_usd_buy = rates['ltc_usd_buy']  # –ü–æ–∫—É–ø–∫–∞ LTC (—Å–∫–æ–ª—å–∫–æ USD –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∑–∞ 1 LTC)
    ltc_to_usd_sell = rates['ltc_usd_sell']  # –ü—Ä–æ–¥–∞–∂–∞ LTC (—Å–∫–æ–ª—å–∫–æ USD –ø–æ–ª—É—á–∏–º –∑–∞ 1 LTC)
    usd_to_rub_buy = rates['usd_rub_buy']  # –ü–æ–∫—É–ø–∫–∞ USD (—Å–∫–æ–ª—å–∫–æ RUB –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∑–∞ 1 USD)
    usd_to_rub_sell = rates['usd_rub_sell']  # –ü—Ä–æ–¥–∞–∂–∞ USD (—Å–∫–æ–ª—å–∫–æ RUB –ø–æ–ª—É—á–∏–º –∑–∞ 1 USD)
    
    # –†–∞—Å—á–µ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
    ltc_to_rub_buy = ltc_to_usd_buy * usd_to_rub_buy  # –ü–æ–∫—É–ø–∫–∞ LTC –≤ —Ä—É–±–ª—è—Ö
    ltc_to_rub_sell = ltc_to_usd_sell * usd_to_rub_sell  # –ü—Ä–æ–¥–∞–∂–∞ LTC –≤ —Ä—É–±–ª—è—Ö
    
    # Create keyboard for rate management
    keyboard = [
        [InlineKeyboardButton("üí± –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å—ã", callback_data="admin_change_rates")]
    ]
    keyboard.append([back_button("admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üí± *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç*\n\n"
        f"*–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n\n"
        f"*–ö—É—Ä—Å—ã LTC/USD:*\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ LTC: 1 LTC = ${rates['ltc_usd_buy']:.2f}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ LTC: 1 LTC = ${rates['ltc_usd_sell']:.2f}\n\n"
        f"*–ö—É—Ä—Å—ã USD/RUB:*\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ USD: 1 USD = ‚ÇΩ{rates['usd_rub_buy']:.2f}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ USD: 1 USD = ‚ÇΩ{rates['usd_rub_sell']:.2f}\n\n"
        f"*–†–∞—Å—á–µ—Ç–Ω—ã–µ –∫—É—Ä—Å—ã LTC/RUB:*\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ LTC: 1 LTC ‚âà ‚ÇΩ{ltc_to_rub_buy:.2f}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ LTC: 1 LTC ‚âà ‚ÇΩ{ltc_to_rub_sell:.2f}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_change_rates_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start the process of changing rates"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get current rates
    rates = get_current_rates()
    
    # –†–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–¨ –ö –î–û–õ–õ–ê–†–£" –∏ "–î–û–õ–õ–ê–† –ö LTC"
    ltc_to_usd_buy = rates['ltc_usd_buy']  # –ü–æ–∫—É–ø–∫–∞ LTC (—Å–∫–æ–ª—å–∫–æ USD –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∑–∞ 1 LTC)
    ltc_to_usd_sell = rates['ltc_usd_sell']  # –ü—Ä–æ–¥–∞–∂–∞ LTC (—Å–∫–æ–ª—å–∫–æ USD –ø–æ–ª—É—á–∏–º –∑–∞ 1 LTC)
    usd_to_rub_buy = rates['usd_rub_buy']  # –ü–æ–∫—É–ø–∫–∞ USD (—Å–∫–æ–ª—å–∫–æ RUB –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∑–∞ 1 USD)
    usd_to_rub_sell = rates['usd_rub_sell']  # –ü—Ä–æ–¥–∞–∂–∞ USD (—Å–∫–æ–ª—å–∫–æ RUB –ø–æ–ª—É—á–∏–º –∑–∞ 1 USD)
    
    # Create back button
    keyboard = [[back_button("admin_manage_rates")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üí± *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç*\n\n"
        f"*–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ LTC: 1 LTC = ${rates['ltc_usd_buy']:.2f}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ LTC: 1 LTC = ${rates['ltc_usd_sell']:.2f}\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ USD: 1 USD = ‚ÇΩ{rates['usd_rub_buy']:.2f}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ USD: 1 USD = ‚ÇΩ{rates['usd_rub_sell']:.2f}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"`ltc_buy ltc_sell usd_buy usd_sell`\n\n"
        f"*–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:* `{rates['ltc_usd_buy']} {rates['ltc_usd_sell']} {rates['usd_rub_buy']} {rates['usd_rub_sell']}`\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n"
        f"‚Ä¢ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤: `70 68 90 88`\n"
        f"‚Ä¢ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: `72 {rates['ltc_usd_sell']} {rates['usd_rub_buy']} {rates['usd_rub_sell']}`",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Set conversation state
    context.user_data["admin_action"] = "waiting_for_rates"

async def admin_handle_rates_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle rates input from admin"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for rates
    if context.user_data.get("admin_action") != "waiting_for_rates":
        return
    
    # Get rates input
    input_text = update.message.text.strip()
    
    try:
        # Parse rates
        values = input_text.split()
        
        if len(values) != 4:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å 4 –∑–Ω–∞—á–µ–Ω–∏—è: –ø–æ–∫—É–ø–∫–∞ LTC, –ø—Ä–æ–¥–∞–∂–∞ LTC, –ø–æ–∫—É–ø–∫–∞ USD, –ø—Ä–æ–¥–∞–∂–∞ USD."
            )
            return
        
        ltc_usd_buy = float(values[0])
        ltc_usd_sell = float(values[1])
        usd_rub_buy = float(values[2])
        usd_rub_sell = float(values[3])
        
        # Validate rates
        if ltc_usd_buy <= 0 or ltc_usd_sell <= 0 or usd_rub_buy <= 0 or usd_rub_sell <= 0:
            await update.message.reply_text("‚ùå –í—Å–µ –∫—É—Ä—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
            return
        
        # Update rates
        update_rates(ltc_usd_buy, ltc_usd_sell, usd_rub_buy, usd_rub_sell)
        
        # Clear conversation state
        if "admin_action" in context.user_data:
            del context.user_data["admin_action"]
        
        # Create keyboard for going back to rate management
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_rates")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã*\n\n"
            f"*–ù–æ–≤—ã–µ –∫—É—Ä—Å—ã:*\n"
            f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ LTC: ${ltc_usd_buy:.2f}\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ LTC: ${ltc_usd_sell:.2f}\n"
            f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ USD: ‚ÇΩ{usd_rub_buy:.2f}\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ USD: ‚ÇΩ{usd_rub_sell:.2f}",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def admin_manage_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show balance management panel"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Create keyboard for balance operations
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance"),
            InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_subtract_balance")
        ]
    ]
    keyboard.append([back_button("admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_start_balance_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start the process of adding or subtracting balance"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get operation type from callback data
    operation = "add" if "add_balance" in update.callback_query.data else "subtract"
    
    # Save operation in context
    context.user_data["balance_operation"] = operation
    
    # Create back button
    keyboard = [[back_button("admin_manage_balance")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    operation_name = "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" if operation == "add" else "—Å–Ω—è—Ç–∏—è"
    
    await update.callback_query.edit_message_text(
        f"üí∞ *–û–ø–µ—Ä–∞—Ü–∏—è {operation_name} –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`ID —Å—É–º–º–∞`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `123456789 500`",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Set conversation state
    context.user_data["admin_action"] = "waiting_for_balance_data"

async def admin_handle_balance_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle balance operation input from admin"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for balance data
    if context.user_data.get("admin_action") != "waiting_for_balance_data":
        return
    
    # Get operation type from context
    operation = context.user_data.get("balance_operation", "add")
    
    # Get input
    input_text = update.message.text.strip()
    
    try:
        # Parse input
        parts = input_text.split()
        
        if len(parts) != 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É."
            )
            return
        
        target_user_id = int(parts[0])
        amount = float(parts[1])
        
        # Validate amount
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # Get user data
        user = await get_user(target_user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Update balance
        current_balance = user.get("balance", 0)
        
        if operation == "add":
            new_balance = current_balance + amount
            action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
        else:  # subtract
            if current_balance < amount:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} —Ä—É–±."
                )
                return
            
            new_balance = current_balance - amount
            action_text = "—Å–Ω—è—Ç–æ"
        
        user["balance"] = new_balance
        await save_user(target_user_id, user)
        
        # Clear conversation state
        if "admin_action" in context.user_data:
            del context.user_data["admin_action"]
        if "balance_operation" in context.user_data:
            del context.user_data["balance_operation"]
        
        # Create keyboard for going back
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_balance")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username', '–ù–µ—Ç –∏–º–µ–Ω–∏')}\n"
            f"ID: `{target_user_id}`\n"
            f"{action_text.capitalize()}: {amount} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Send notification to user
        try:
            from telegram import Bot
            bot = context.bot
            
            await bot.send_message(
                chat_id=target_user_id,
                text=f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω*\n\n"
                     f"- {action_text.capitalize()}: {amount} —Ä—É–±.\n"
                     f"- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Failed to send balance notification: {e}")
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def admin_order_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show order statistics"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get order statistics
    active_orders = await get_active_orders()
    in_progress_orders = await get_in_progress_orders()
    completed_orders = await get_completed_orders()
    
    # Calculate total spread
    total_spread = sum(order.get("spread", 0) or 0 for order in completed_orders)
    
    # Create keyboard for detailed views
    keyboard = [
        [
            InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_view_active_orders"),
            InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data="admin_view_in_progress_orders")
        ],
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="admin_view_completed_orders")
        ]
    ]
    keyboard.append([back_button("admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫*\n\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(active_orders)}\n"
        f"‚Ä¢ –ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ: {len(in_progress_orders)}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(completed_orders)}\n"
        f"‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (—Å–ø—Ä–µ–¥): {total_spread:.2f} —Ä—É–±.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """View orders by status"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get order status from callback data
    query_data = update.callback_query.data
    status = query_data.split('_')[-1]  # Extract status from callback_data
    
    # Get orders by status
    if status == "active_orders":
        orders = await get_active_orders()
        title = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"
        back_callback = "admin_order_stats"
    elif status == "in_progress_orders":
        orders = await get_in_progress_orders()
        title = "–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ"
        back_callback = "admin_order_stats"
    elif status == "completed_orders":
        orders = await get_completed_orders()
        title = "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
        back_callback = "admin_order_stats"
    else:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫.")
        return
    
    # Create keyboard with back button
    keyboard = [[back_button(back_callback)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Create message text
    text = f"üìã *{title}*\n\n"
    
    if not orders:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    else:
        # Show most recent 10 orders
        for order in orders[-10:]:
            order_number = order.get("order_number", "N/A")
            username = order.get("username", "–ù–µ—Ç –∏–º–µ–Ω–∏")
            order_type = "–ü–æ–∫—É–ø–∫–∞ LTC" if order.get("order_type") == "buy" else "–ü—Ä–æ–¥–∞–∂–∞ LTC"
            amount = order.get("amount", 0)
            spread = order.get("spread", "N/A")
            
            text += f"‚Ä¢ *{order_number}*: {username}\n"
            text += f"  {order_type}, {amount} —Ä—É–±."
            
            if spread and status == "completed_orders":
                text += f", –°–ø—Ä–µ–¥: {spread} —Ä—É–±."
            
            text += "\n\n"
        
        if len(orders) > 10:
            text += f"–ò –µ—â–µ {len(orders) - 10} –∑–∞—è–≤–æ–∫..."
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_custom_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show custom commands management panel"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Create keyboard for custom commands management
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="admin_add_command"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="admin_remove_command")
        ]
    ]
    keyboard.append([back_button("admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_add_command_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start the process of adding a custom command"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Create back button
    keyboard = [[back_button("admin_custom_commands")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ /):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `info`",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Set conversation state
    context.user_data["admin_action"] = "waiting_for_command_name"

async def admin_handle_command_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle command name input from admin"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for command name
    if context.user_data.get("admin_action") != "waiting_for_command_name":
        return
    
    # Get command name
    command_name = update.message.text.strip()
    
    # Validate command name
    if not command_name or " " in command_name or "/" in command_name:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞ /."
        )
        return
    
    # Save command name in context
    context.user_data["command_name"] = command_name
    context.user_data["admin_action"] = "waiting_for_command_response"
    
    # Create back button
    keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_custom_commands")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã* /{command_name}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "*–∂–∏—Ä–Ω—ã–π* _–∫—É—Ä—Å–∏–≤_ `–∫–æ–¥` [—Å—Å—ã–ª–∫–∞](URL)",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_handle_command_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle command response input from admin"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for command response
    if context.user_data.get("admin_action") != "waiting_for_command_response":
        return
    
    # Get command name and response
    command_name = context.user_data.get("command_name")
    response = update.message.text
    
    if not command_name or not response:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # Ask for buttons
    context.user_data["command_response"] = response
    context.user_data["admin_action"] = "waiting_for_command_buttons"
    
    # Create buttons for yes/no
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="admin_add_command_buttons"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="admin_finish_command")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã* /{command_name}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ –∫–Ω–æ–ø–∫–∏?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_add_command_buttons_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start the process of adding buttons to a command"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get command name
    command_name = context.user_data.get("command_name")
    
    if not command_name:
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # Initialize buttons list
    if "command_buttons" not in context.user_data:
        context.user_data["command_buttons"] = []
    
    # Create back button
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="admin_finish_command")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üîò *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ –∫–æ–º–∞–Ω–¥–µ* /{command_name}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É`\n\n"
        "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Set conversation state
    context.user_data["admin_action"] = "waiting_for_button_text"

async def admin_handle_button_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button text input from admin"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for button text
    if context.user_data.get("admin_action") != "waiting_for_button_text":
        return
    
    # Get button text
    button_text = update.message.text.strip()
    
    if not button_text:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    # Add button to list
    if "command_buttons" not in context.user_data:
        context.user_data["command_buttons"] = []
    
    context.user_data["command_buttons"].append(button_text)
    
    # Get command name
    command_name = context.user_data.get("command_name")
    buttons = context.user_data.get("command_buttons", [])
    
    # Create keyboard to add more buttons or finish
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="admin_finish_command")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    button_list = "\n".join([f"‚Ä¢ {btn}" for btn in buttons])
    
    await update.message.reply_text(
        f"üîò *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ –∫–æ–º–∞–Ω–¥–µ* /{command_name}\n\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n{button_list}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_finish_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Finish adding a custom command"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Get command data
    command_name = context.user_data.get("command_name")
    response = context.user_data.get("command_response")
    buttons = context.user_data.get("command_buttons", [])
    
    if not command_name or not response:
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # Add custom command
    await add_custom_command(command_name, response, buttons)
    
    # Clear conversation state
    for key in ["admin_action", "command_name", "command_response", "command_buttons"]:
        if key in context.user_data:
            del context.user_data[key]
    
    # Create keyboard to go back
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_custom_commands")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    button_text = ""
    if buttons:
        button_list = "\n".join([f"‚Ä¢ {btn}" for btn in buttons])
        button_text = f"\n\n–ö–Ω–æ–ø–∫–∏:\n{button_list}"
    
    await update.callback_query.edit_message_text(
        f"‚úÖ *–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
        f"–ö–æ–º–∞–Ω–¥–∞: /{command_name}\n"
        f"–û—Ç–≤–µ—Ç: {response}{button_text}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_remove_command_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start the process of removing a custom command"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # Create back button
    keyboard = [[back_button("admin_custom_commands")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "‚ùå *–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ /):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `info`",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Set conversation state
    context.user_data["admin_action"] = "waiting_for_command_to_remove"

async def admin_handle_command_to_remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle command name input for removal"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Check if we're waiting for command to remove
    if context.user_data.get("admin_action") != "waiting_for_command_to_remove":
        return
    
    # Get command name
    command_name = update.message.text.strip()
    
    # Remove command
    command = await get_custom_command(command_name)
    
    if not command:
        # Create keyboard to go back
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_custom_commands")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå –ö–æ–º–∞–Ω–¥–∞ /{command_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=reply_markup
        )
        return
    
    # Remove the command
    success = await remove_custom_command(command_name)
    
    # Clear conversation state
    if "admin_action" in context.user_data:
        del context.user_data["admin_action"]
    
    # Create keyboard to go back
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_custom_commands")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{command_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /{command_name}.",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
async def admin_manage_operators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    config = load_config()
    operators = config.get("operator_ids", [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    operator_list = ""
    if operators:
        for op_id in operators:
            user = await get_user(op_id)
            username = user.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            operator_list += f"‚Ä¢ ID: {op_id}, @{username}\n"
    else:
        operator_list = "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_operator"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_remove_operator")
        ],
        back_button("admin_panel")
    ]
    
    await update.callback_query.edit_message_text(
        f"üëÆ‚Äç‚ôÇÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"
        f"–¢–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n{operator_list}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_add_operator_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    context.user_data["admin_action"] = "add_operator"
    
    keyboard = [back_button("admin_manage_operators")]
    
    await update.callback_query.edit_message_text(
        "üëÆ‚Äç‚ôÇÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_remove_operator_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    config = load_config()
    operators = config.get("operator_ids", [])
    
    if not operators:
        await update.callback_query.edit_message_text(
            "‚ùå *–û—à–∏–±–∫–∞*\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup([back_button("admin_manage_operators")]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    keyboard = []
    for op_id in operators:
        user = await get_user(op_id)
        username = user.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") if user else f"ID: {op_id}"
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {username}", callback_data=f"admin_delete_operator_{op_id}"
        )])
    
    keyboard.append(back_button("admin_manage_operators"))
    
    await update.callback_query.edit_message_text(
        "üëÆ‚Äç‚ôÇÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_delete_operator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ callback_data"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ callback_data
    operator_id = int(update.callback_query.data.split("_")[-1])
    
    # –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    remove_operator(operator_id)
    
    await update.callback_query.edit_message_text(
        f"‚úÖ *–£—Å–ø–µ—Ö*\n\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä (ID: {operator_id}) –±—ã–ª —É–¥–∞–ª–µ–Ω.",
        reply_markup=InlineKeyboardMarkup([back_button("admin_manage_operators")]),
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
async def admin_min_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    min_amount = get_min_amount()
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="admin_change_min_amount")],
        back_button("admin_panel")
    ]
    
    await update.callback_query.edit_message_text(
        f"üíµ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏*\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: *{min_amount:.2f}* PMR —Ä—É–±–ª–µ–π\n\n"
        f"–≠—Ç–∞ —Å—É–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_change_min_amount_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["admin_action"] = "change_min_amount"
    
    keyboard = [back_button("admin_min_amount")]
    
    await update.callback_query.edit_message_text(
        "üíµ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ PMR —Ä—É–±–ª—è—Ö:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏
async def admin_manage_texts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    commands = await get_commands()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    command_list = ""
    if commands:
        for cmd in commands:
            command_list += f"‚Ä¢ /{cmd['command']}\n"
    else:
        command_list = "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="admin_add_command"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="admin_remove_command")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="admin_edit_command")
        ],
        back_button("admin_panel")
    ]
    
    await update.callback_query.edit_message_text(
        f"üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏*\n\n"
        f"–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã:\n{command_list}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_back_to_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Return to admin panel"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not await check_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.callback_query.answer()
    
    keyboard = admin_keyboard()
    
    await update.callback_query.edit_message_text(
        "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_handle_min_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–¥–µ–º –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    if context.user_data.get("admin_action") != "change_min_amount":
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    try:
        amount = float(update.message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup([back_button("admin_min_amount")])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    set_min_amount(amount)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if "admin_action" in context.user_data:
        del context.user_data["admin_action"]
    
    await update.message.reply_text(
        f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount:.2f} PMR —Ä—É–±–ª–µ–π.",
        reply_markup=InlineKeyboardMarkup([back_button("admin_min_amount")])
    )

async def admin_handle_operator_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–¥–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if context.user_data.get("admin_action") != "add_operator":
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        operator_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup([back_button("admin_manage_operators")])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(operator_id)
    if not user:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {operator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
            reply_markup=InlineKeyboardMarkup([back_button("admin_manage_operators")])
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    add_operator(operator_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if "admin_action" in context.user_data:
        del context.user_data["admin_action"]
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {operator_id} (@{user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
        reply_markup=InlineKeyboardMarkup([back_button("admin_manage_operators")])
    )

def register_admin_handlers(app: Application) -> None:
    """Register all admin handlers"""
    # Admin panel command
    app.add_handler(CommandHandler("admin", admin_panel))
    
    # Admin panel navigation
    app.add_handler(CallbackQueryHandler(admin_manage_users, pattern="^admin_manage_users$"))
    app.add_handler(CallbackQueryHandler(admin_list_users_by_role, pattern="^admin_list_users_"))
    app.add_handler(CallbackQueryHandler(admin_assign_role_start, pattern="^admin_assign_role$"))
    app.add_handler(CallbackQueryHandler(admin_set_user_role, pattern="^admin_set_role_"))
    
    # Rates management
    app.add_handler(CallbackQueryHandler(admin_manage_rates, pattern="^admin_manage_rates$"))
    app.add_handler(CallbackQueryHandler(admin_change_rates_start, pattern="^admin_change_rates$"))
    
    # Balance management
    app.add_handler(CallbackQueryHandler(admin_manage_balance, pattern="^admin_manage_balance$"))
    app.add_handler(CallbackQueryHandler(admin_start_balance_operation, pattern="^admin_(add|subtract)_balance$"))
    
    # Order statistics
    app.add_handler(CallbackQueryHandler(admin_order_stats, pattern="^admin_order_stats$"))
    app.add_handler(CallbackQueryHandler(admin_view_orders, pattern="^admin_view_.*_orders$"))
    
    # Custom commands
    app.add_handler(CallbackQueryHandler(admin_custom_commands, pattern="^admin_custom_commands$"))
    app.add_handler(CallbackQueryHandler(admin_add_command_start, pattern="^admin_add_command$"))
    app.add_handler(CallbackQueryHandler(admin_add_command_buttons_start, pattern="^admin_add_command_buttons$"))
    app.add_handler(CallbackQueryHandler(admin_finish_command, pattern="^admin_finish_command$"))
    app.add_handler(CallbackQueryHandler(admin_remove_command_start, pattern="^admin_remove_command$"))
    
    # Manage operators
    app.add_handler(CallbackQueryHandler(admin_manage_operators, pattern="^admin_manage_operators$"))
    app.add_handler(CallbackQueryHandler(admin_add_operator_start, pattern="^admin_add_operator$"))
    app.add_handler(CallbackQueryHandler(admin_remove_operator_start, pattern="^admin_remove_operator$"))
    app.add_handler(CallbackQueryHandler(admin_delete_operator, pattern="^admin_delete_operator_"))
    
    # Minimum amount settings
    app.add_handler(CallbackQueryHandler(admin_min_amount, pattern="^admin_min_amount$"))
    app.add_handler(CallbackQueryHandler(admin_change_min_amount_start, pattern="^admin_change_min_amount$"))
    
    # Manage texts
    app.add_handler(CallbackQueryHandler(admin_manage_texts, pattern="^admin_manage_texts$"))
    
    # Back to panel
    app.add_handler(CallbackQueryHandler(admin_back_to_panel, pattern="^admin_panel$"))
    
    # Message handlers for conversations
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_user_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_rates_input))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_balance_operation))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_command_name))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_min_amount))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_operator_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_command_response))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_button_text))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, admin_handle_command_to_remove))
