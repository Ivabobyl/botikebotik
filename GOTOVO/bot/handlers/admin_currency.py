"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
"""

import logging
from typing import Dict, Any, Optional, List

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from bot.config.config import load_config, save_config
from bot.utils.helpers import check_admin

logger = logging.getLogger(__name__)

async def handle_currency_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã
    config = load_config()
    crypto_currencies = config.get("currencies", {}).get("crypto", [])
    fiat_currencies = config.get("currencies", {}).get("fiat", [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    crypto_list = "\n".join([
        f"{'‚úÖ' if c.get('enabled', True) else '‚ùå'} {c.get('name', '')} ({c.get('code', '')})"
        for c in crypto_currencies if c.get('code') not in ['‚ûï', 'üîô']
    ])
    
    fiat_list = "\n".join([
        f"{'‚úÖ' if c.get('enabled', True) else '‚ùå'} {c.get('name', '')} ({c.get('code', '')})"
        for c in fiat_currencies if c.get('code') not in ['‚ûï', 'üîô']
    ])
    
    message_text = (
        "üí± *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏*\n\n"
        "*–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:*\n"
        f"{crypto_list or '–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'}\n\n"
        "*–§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:*\n"
        f"{fiat_list or '–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup([
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç—É", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∞—Ç"],
        ["‚úÖ –í–∫–ª/–í—ã–∫–ª –≤–∞–ª—é—Ç—É"],
        ["üîÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["admin_state"] = "currency_management"
    
    await update.message.reply_text(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_add_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["admin_state"] = "add_crypto"
    
    await update.message.reply_text(
        "ü™ô *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "```\n"
        "–∫–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "```\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `BTC Bitcoin`\n\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=ReplyKeyboardMarkup([
            ["üîÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_add_fiat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["admin_state"] = "add_fiat"
    
    await update.message.reply_text(
        "üíµ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "```\n"
        "–∫–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª\n"
        "```\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `EUR –ï–≤—Ä–æ ‚Ç¨`\n\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=ReplyKeyboardMarkup([
            ["üîÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_toggle_currency_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["admin_state"] = "toggle_currency_status"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
    config = load_config()
    crypto_currencies = config.get("currencies", {}).get("crypto", [])
    fiat_currencies = config.get("currencies", {}).get("fiat", [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
    all_currencies = [
        f"CRYPTO:{c.get('code')}" for c in crypto_currencies if c.get('code') not in ['‚ûï', 'üîô']
    ] + [
        f"FIAT:{c.get('code')}" for c in fiat_currencies if c.get('code') not in ['‚ûï', 'üîô']
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "‚úÖ *–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –µ—ë —Å—Ç–∞—Ç—É—Å–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `BTC` –∏–ª–∏ `USD`\n\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:\n"
    )
    
    for currency_code in all_currencies:
        currency_type, code = currency_code.split(":")
        if currency_type == "CRYPTO":
            currency = next((c for c in crypto_currencies if c.get('code') == code), None)
        else:
            currency = next((c for c in fiat_currencies if c.get('code') == code), None)
            
        if currency:
            status = "‚úÖ" if currency.get("enabled", True) else "‚ùå"
            message_text += f"{status} {currency.get('name', '')} ({code})\n"
    
    await update.message.reply_text(
        message_text,
        reply_markup=ReplyKeyboardMarkup([
            ["üîÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_admin_currency_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(user_id):
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏."
        )
        return
    
    message_text = update.message.text
    admin_state = context.user_data.get("admin_state", None)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if message_text == "üîÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from bot.handlers.button_handler import process_button
        await process_button(update, context, message_text)
        return
        
    elif message_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from bot.handlers.button_handler import process_button
        await process_button(update, context, message_text)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç
    if admin_state == "currency_management":
        if message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç—É":
            await handle_add_crypto(update, context)
            return
        elif message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∞—Ç":
            await handle_add_fiat(update, context)
            return
        elif message_text == "‚úÖ –í–∫–ª/–í—ã–∫–ª –≤–∞–ª—é—Ç—É":
            await handle_toggle_currency_status(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    elif admin_state == "add_crypto":
        try:
            parts = message_text.split()
            if len(parts) >= 2:
                code = parts[0].upper()
                name = " ".join(parts[1:])
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã
                config = load_config()
                crypto_currencies = config.get("currencies", {}).get("crypto", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞
                if any(c.get("code") == code for c in crypto_currencies):
                    await update.message.reply_text(
                        f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Å –∫–æ–¥–æ–º {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
                crypto_currencies.append({
                    "code": code,
                    "name": name,
                    "enabled": True
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                config["currencies"]["crypto"] = crypto_currencies
                save_config(config)
                
                await update.message.reply_text(
                    f"‚úÖ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {name} ({code}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
                await handle_currency_management(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–∫–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ`",
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"Error adding crypto: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
    elif admin_state == "add_fiat":
        try:
            parts = message_text.split()
            if len(parts) >= 3:
                code = parts[0].upper()
                symbol = parts[-1]
                name = " ".join(parts[1:-1])
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã
                config = load_config()
                fiat_currencies = config.get("currencies", {}).get("fiat", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞
                if any(c.get("code") == code for c in fiat_currencies):
                    await update.message.reply_text(
                        f"‚ùå –í–∞–ª—é—Ç–∞ —Å –∫–æ–¥–æ–º {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
                fiat_currencies.append({
                    "code": code,
                    "name": name,
                    "symbol": symbol,
                    "enabled": True
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                config["currencies"]["fiat"] = fiat_currencies
                save_config(config)
                
                await update.message.reply_text(
                    f"‚úÖ –í–∞–ª—é—Ç–∞ {name} ({code}) {symbol} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
                await handle_currency_management(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–∫–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª`",
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"Error adding fiat: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
    elif admin_state == "toggle_currency_status":
        try:
            code = message_text.strip().upper()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã
            config = load_config()
            crypto_currencies = config.get("currencies", {}).get("crypto", [])
            fiat_currencies = config.get("currencies", {}).get("fiat", [])
            
            # –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ —Å–ø–∏—Å–∫–µ –∫—Ä–∏–ø—Ç–æ
            crypto_currency = next((c for c in crypto_currencies if c.get("code") == code), None)
            if crypto_currency:
                crypto_currency["enabled"] = not crypto_currency.get("enabled", True)
                config["currencies"]["crypto"] = crypto_currencies
                save_config(config)
                
                status = "–≤–∫–ª—é—á–µ–Ω–∞" if crypto_currency["enabled"] else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                await update.message.reply_text(
                    f"‚úÖ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {crypto_currency.get('name')} ({code}) {status}.",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
                await handle_currency_management(update, context)
                return
            
            # –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–∞—Ç–Ω—ã—Ö
            fiat_currency = next((c for c in fiat_currencies if c.get("code") == code), None)
            if fiat_currency:
                fiat_currency["enabled"] = not fiat_currency.get("enabled", True)
                config["currencies"]["fiat"] = fiat_currencies
                save_config(config)
                
                status = "–≤–∫–ª—é—á–µ–Ω–∞" if fiat_currency["enabled"] else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                await update.message.reply_text(
                    f"‚úÖ –í–∞–ª—é—Ç–∞ {fiat_currency.get('name')} ({code}) {status}.",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
                await handle_currency_management(update, context)
                return
            
            # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            await update.message.reply_text(
                f"‚ùå –í–∞–ª—é—Ç–∞ —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error toggling currency status: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª—é—Ç—ã.",
                parse_mode=ParseMode.MARKDOWN
            )